2020-09-18 11:17:09.607 [main] INFO  LSRuntimeObject - Executing Stage: logicSynthesis
2020-09-18 11:17:09.613 [main] INFO  LSRuntimeObject - Executing Algorithm: Yosys
2020-09-18 11:17:09.781 [main] INFO  Yosys - +-----------------------------------------------------
2020-09-18 11:17:09.781 [main] INFO  Yosys - |			    RESULTS
2020-09-18 11:17:09.782 [main] INFO  Yosys - +-----------------------------------------------------
2020-09-18 11:17:09.782 [main] INFO  Yosys - :               NOR cells:        3
2020-09-18 11:17:09.783 [main] INFO  Yosys - :               NOT cells:        2
2020-09-18 11:17:09.783 [main] INFO  Yosys - :        internal signals:        0
2020-09-18 11:17:09.783 [main] INFO  Yosys - :           input signals:        2
2020-09-18 11:17:09.783 [main] INFO  Yosys - :          output signals:        1
2020-09-18 11:17:09.783 [main] INFO  Yosys - +-----------------------------------------------------
2020-09-18 11:17:09.784 [main] INFO  Yosys - 
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8 (git sha1 5706e90)


-- Executing script file `SC1C1G1T1/xor.v/xor.ys' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `logic/xor.v' to AST representation.
Generating RTLIL representation for module `\xor_gate'.
Successfully finished Verilog frontend.

2. Executing FLATTEN pass (flatten design).
No more expansions possible.

3. Executing SPLITNETS pass (splitting up multi-bit signals).

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Finding top of design hierarchy..
root of   0 design levels: xor_gate            
Automatically selected xor_gate as design top module.

4.2. Analyzing design hierarchy..
Top module:  \xor_gate

4.3. Analyzing design hierarchy..
Top module:  \xor_gate
Removed 0 unused modules.

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.3. Executing PROC_INIT pass (extract init attributes).

5.4. Executing PROC_ARST pass (detect async resets in processes).

5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

5.6. Executing PROC_DLATCH pass (convert process syncs to latches).

5.7. Executing PROC_DFF pass (convert process syncs to FFs).

5.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6. Executing TECHMAP pass (map to technology primitives).

6.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping xor_gate.$xor$logic/xor.v:16$1 ($xor) with simplemap.
No more expansions possible.

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xor_gate'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xor_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xor_gate.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xor_gate'.
Removed a total of 0 cells.

7.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xor_gate..
  removed 1 unused temporary wires.
Removed 0 unused cells and 1 unused wires.

7.8. Executing OPT_EXPR pass (perform const folding).

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\xor_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

8.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 5 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        2
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xor_gate'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \xor_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \xor_gate.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\xor_gate'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xor_gate..
  removed 3 unused temporary wires.
Removed 0 unused cells and 4 unused wires.

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing HIERARCHY pass (managing design hierarchy).

10.1. Analyzing design hierarchy..
Top module:  \xor_gate

10.2. Analyzing design hierarchy..
Top module:  \xor_gate
Removed 0 unused modules.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \xor_gate..
Removed 0 unused cells and 4 unused wires.

12. Generating Graphviz representation of design.
Writing dot description to `SC1C1G1T1/xor.v/xor_yosys.dot'.
Dumping module xor_gate to page 1.
Exec: dot -Tpdf 'SC1C1G1T1/xor.v/xor_yosys.dot' > 'SC1C1G1T1/xor.v/xor_yosys.pdf.new' && mv 'SC1C1G1T1/xor.v/xor_yosys.pdf.new' 'SC1C1G1T1/xor.v/xor_yosys.pdf'

13. Executing EDIF backend.

14. Executing JSON backend.

End of script. Logfile hash: 7746b01af7
CPU: user 0.03s system 0.00s, MEM: 18.89 MB total, 9.61 MB resident
Yosys 0.8 (git sha1 5706e90)
Time spent: 54% 3x read_verilog (0 sec), 8% 4x opt_expr (0 sec), ...

2020-09-18 11:17:09.786 [main] INFO  Yosys - 
2020-09-18 11:17:11.099 [main] INFO  Main - 
--------------------------------------------
LogicSynthesisStats
--------------------------------------------
Netlist name: xor_gate
--------------------------------------------
Total number of inputs: 2
Number of primary inputs: 2
Number of inputs: 0
--------------------------------------------
Total number of outputs: 1
Number of primary outputs: 1
Number of outputs: 0
--------------------------------------------
Number of gates : 5
Number of PRIMARY_INPUT gates: 2
Number of PRIMARY_OUTPUT gates: 1
Number of NOT gates: 2
Number of NOR gates: 3

2020-09-18 11:17:11.101 [main] INFO  TMRuntimeObject - Executing Stage: technologyMapping
2020-09-18 11:17:11.104 [main] INFO  TMRuntimeObject - Executing Algorithm: SimulatedAnnealing
2020-09-18 11:17:11.114 [main] INFO  SimulatedAnnealing - 
--------------------------------------------
LSLogicEvaluation
--------------------------------------------
$1             	false	true	true	false	
$5             	true	false	true	false	
$2             	false	false	false	true	
b              	false	true	false	true	
a              	false	false	true	true	
$4             	true	true	false	false	
out            	false	true	true	false	
$3             	true	false	false	false	
--------------------------------------------

2020-09-18 11:18:13.225 [main] INFO  SimulatedAnnealing - 
--------------------------------------------
TMToxicityEvaluation
--------------------------------------------
$1             	1,00	1,00	1,00	1,00	
$5             	1,00	0,80	1,00	0,80	
$2             	0,97	1,00	1,00	0,99	
$4             	0,97	0,97	1,00	1,00	
$3             	0,96	1,00	1,00	1,00	
--------------------------------------------
               	0,90	0,78	1,00	0,79	
--------------------------------------------

2020-09-18 11:18:13.229 [main] INFO  SimulatedAnnealing - 
--------------------------------------------
TMActivityEvaluation
--------------------------------------------
$1             	0,0041	5,0367	5,0317	0,0042	
$5             	3,5700	0,0208	3,5700	0,0208	
$2             	0,0060	0,0064	0,0061	3,2081	
b              	0,0020	2,5000	0,0020	2,5000	
a              	0,0030	0,0030	1,8000	1,8000	
$4             	2,6499	2,6499	0,0054	0,0054	
out            	0,0041	5,0367	5,0317	0,0042	
$3             	3,8199	0,0209	0,0224	0,0202	
--------------------------------------------

2020-09-18 11:18:13.230 [main] INFO  SimulatedAnnealing - Node: $1   	Type: NOR       	Gate: P1_BM3RI  	
2020-09-18 11:18:13.230 [main] INFO  SimulatedAnnealing - Node: out  	Type: PRIMARY_OUTPUT	Gate: YFP_reporter	
2020-09-18 11:18:13.230 [main] INFO  SimulatedAnnealing - Node: $2   	Type: NOR       	Gate: P1_PhlF   	
2020-09-18 11:18:13.231 [main] INFO  SimulatedAnnealing - Node: $3   	Type: NOR       	Gate: P2_CI     	
2020-09-18 11:18:13.231 [main] INFO  SimulatedAnnealing - Node: b    	Type: PRIMARY_INPUT	Gate: aTc_sensor	
2020-09-18 11:18:13.231 [main] INFO  SimulatedAnnealing - Node: a    	Type: PRIMARY_INPUT	Gate: Xylose_sensor	
2020-09-18 11:18:13.232 [main] INFO  SimulatedAnnealing - Node: $4   	Type: NOT       	Gate: P1_IcaR   	
2020-09-18 11:18:13.232 [main] INFO  SimulatedAnnealing - Node: $5   	Type: NOT       	Gate: P1_CI434  	
2020-09-18 11:18:13.232 [main] INFO  SimulatedAnnealing - Score: 1190,99
2020-09-18 11:18:13.232 [main] INFO  SimulatedAnnealing - Generating plots
2020-09-18 11:18:33.652 [main] INFO  PLRuntimeObject - Executing Stage: placing
2020-09-18 11:18:33.656 [main] INFO  PLRuntimeObject - Executing Algorithm: Eugene
2020-09-18 11:18:33.698 [main] INFO  Eugene - building Eugene input script
2020-09-18 11:18:33.812 [main] INFO  Eugene - running Eugene
2020-09-18 11:19:03.764 [main] INFO  Eugene - processing Eugene output
2020-09-18 11:19:03.772 [main] INFO  Eugene - generating dnaplotlib figures
2020-09-18 11:19:05.360 [main] INFO  EXRuntimeObject - Executing Stage: export
2020-09-18 11:19:05.365 [main] INFO  EXRuntimeObject - Executing Algorithm: SBOL
2020-09-18 11:19:05.519 [main] INFO  SBOL - creating SBOL document
2020-09-18 11:19:05.652 [main] INFO  SBOL - grouping inserts
2020-09-18 11:19:05.747 [main] INFO  SBOL - adding design modules
2020-09-18 11:19:05.754 [main] INFO  SBOL - Writing SBOL document.
